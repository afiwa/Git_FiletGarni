<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html">
<ui:composition template="/WEB-INF/templates/archeProducteur.xhtml">
	<ui:define name="title">DASHBOARD PRODUCTEURs</ui:define>
	<ui:define name="headcssscript">
		<link type="text/css" rel="stylesheet"
			href="https://fonts.googleapis.com/css?family=Roboto:400,700" />
		<link type="text/css" rel="stylesheet" href="dashboardProducteur.css" />
		<link rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css" />
		<link type="text/css" rel="stylesheet"
			href="AvisConso/css/AvisConso.css" />
		<link type="text/css" rel="stylesheet"
			href="VentesDuMois/css/VentesDuMois.css" />
		<link rel="stylesheet" href="grapheDeLaMortQuiTue/CAAnnuel.css"
			type="text/css" />
		<link type="text/css" rel="stylesheet"
			href="../css/archeProducteur.css" />
	</ui:define>
	<ui:define name="content">

		<section class="dashboardProducteur"> <!-- COMMANDES A PREPARER -->
		<div class="nbCmdAPreparer">
			<span class="titreNbCmdAPreparer">Commandes du jour à préparer</span>
			<br /> <span class="nombreCommande">#{mbDashboardProducteur.recupererNbCmdAPrepDuJour()}</span> <br /> <a href="#">Commandes
				de la semaine</a>

			<div class="boutonNbCommande">
				<h:commandButton value="J'y vais!"
					style="vertical-align: middle; border: none; background-color:#F1C40F ; color: #fff; font-size: 20px; "
					action="#{mbProducteurCommandeDuJour.afficherLesCommandesDuJour()}" />
				<span></span>
			</div>
		</div>


		<!-- STOCK PRODUIT -->

		<div class="stockCatalogue">
			<span class="titreStockCatalogue">Produits dans le catalogue</span> <br />
			<h:outputLabel class="nombreCommande"
				value="#{mbDashboardProducteur.listProduitProducteur.size()}" />
			<br />

			<div class="boutonCatalogue">
				<h:commandButton value="Consulter mon catalogue"
					style="vertical-align: middle; border: none; background-color:#F1C40F ; color: #fff; font-size: 20px; "
					action="#{mbDashboardProducteur.afficherProduitProducteur(35)}" />
				<span></span>
			</div>
		</div>
		<div class="stockRupture">
			<img class="logoDanger" src="img/danger.png"
				alt="Produit plus en stock!!!" /> <br /> <span class="infoStock">
				Il ne vous reste plus que
				#{mbDashboardProducteur.recupererProduitStockBas(35).quantiteEnStock}
				#{mbDashboardProducteur.recupererProduitStockBas(35).conditionnements.get(0).unite}
				de #{mbDashboardProducteur.recupererProduitStockBas(35).libelle} !</span> <br />

			<div class="boutonAlert">
				<h:commandButton value="J'y vais!"
					style="vertical-align: middle; border: none; background-color:#F1C40F ; color: #fff; font-size: 20px; margin-top: 7px;"
					action="#{mbDashboardProducteur.afficherFicheProduitStockBas(35)}" />
				<span></span>
			</div>
		</div>

		<!-- AVIS CONSOMMATEUR -->
		<div class="avisConsoProducteur">
			<div class="titreAvisConso">Derniers avis consommateur</div>
			<div class='tousLesAvisConso'>
				<!-- Panel one -->
				<div class='unAvisConso'>
					<img
						src='http://www.designbolts.com/wp-content/uploads/2014/01/Superman-Flat-Design.png' />
					<p class="descriptionAvis">Les pommes de la ferme de M. Ly sont
						succulentes. Heureusement qu’elles ne contiennent pas de
						kryptonite car je n’aurais jamais pu les goûter. Je vous conseille
						vivement les pommes Elstar, avec Wonderwoman, nous les
						cuisinons en tarte Tatin accompagnées d’une glace à la vanille…</p>

					<h7>Superman</h7>
				</div>
				<!-- Panel Two -->
				<div class='unAvisConso'>
					<img
						src='http://www.designbolts.com/wp-content/uploads/2014/01/Batman-Flat-Design.png' />
					<p class="descriptionAvis">Les noisettes de M Ly me donnent une force herculéenne. 
					J’en prends toujours une poignée avec moi avant de partir au combat.</p>
					<h7>Batman</h7>
				</div>
				<!-- Panel Three -->
				<div class='unAvisConso'>
					<img
						src='http://www.designbolts.com/wp-content/uploads/2014/01/Liz-Sherman-Flat-Design.png' />
					<p class="descriptionAvis">Je dis MERCI à M. Ly !!!! Grâce à ces produits naturels mon feu intérieur c’est décuplé. 
					Je brûle tout sur mon passage, plus rien ne me résiste. 
					J’aime tout particulièrement son jus de poire.</p>
					<h7>Liz Sherman</h7>
				</div>
			</div>
		</div>

		<!--  CAMEMBERT VENTES DU MOIS -->
		<div class="statsVentesMois">
			<span class="titreVentesMois">Ventes du mois</span>
			<div id="pieChart" class="camembert"></div>
			<br />

			<div class="boutonHistorique">
				<input type="button" value="Consulter l'historique"
					style="vertical-align: middle; border: none; background-color: #F1C40F; color: #fff; font-size: 20px; margin-top: 7px;"></input>
				<span></span>
			</div>
		</div>

		<!--METEO -->
		<div class="meteoProducteur">
			<div id="cont_ef64d4e905d5a82b7520aa3e40cb3a1a"></div>
		</div>

		<!-- ARTICLE STAR -->
		<div class="articleStar">
			<span class="titreArticleStar">Article le plus vendu</span> <br /> <img
				class="imgPomme" src="img/elstar2Tab.jpg" alt="pommeElstar" /> <br />
			<span class="qteVendue">Quantité vendue ce mois-ci : 320 kg</span> <br />
			<span class="qteStock">Quantité restante : 12 kg</span> <br />
			<span class="nomArticleStar">Pomme Elstar</span>
		</div>

		<!-- CA ANNUEL -->
		<div class="statsCAAnnuel">
			<section class="graphe"> <span class="titreCA">Chiffre
				d'affaire annuel - 2016</span>
			<div id='dashboard'></div>
			</section>
			<script src="http://d3js.org/d3.v3.min.js"></script>
			<script>
                    function dashboard(id, fData) {
                        var barColor = '#1FAB89';

                        function segColor(c) {
                            return {
                                pommes: "#F1C40F",
                                poires: "#018AB6",
                                châtaignes: "#A2BB2A"
                            }[c];
                        }

                        // compute total for each state.
                        fData.forEach(function(d) {
                            d.total = d.freq.pommes + d.freq.poires + d.freq.châtaignes;
                        });

                        // function to handle histogram.
                        function histoGram(fD) {
                            var hG = {},
                                hGDim = {
                                    t: 60,
                                    r: 0,
                                    b: 30,
                                    l: 0
                                };
                            hGDim.w = 500 - hGDim.l - hGDim.r,
                                hGDim.h = 300 - hGDim.t - hGDim.b;

                            //create svg for histogram.
                            var hGsvg = d3.select(id).append("svg")
                                .attr("width", hGDim.w + hGDim.l + hGDim.r)
                                .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
                                .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

                            // create function for x-axis mapping.
                            var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                                .domain(fD.map(function(d) {
                                    return d[0];
                                }));

                            // Add x-axis to the histogram svg.
                            hGsvg.append("g").attr("class", "x axis")
                                .attr("transform", "translate(0," + hGDim.h + ")")
                                .call(d3.svg.axis().scale(x).orient("bottom"));

                            // Create function for y-axis map.
                            var y = d3.scale.linear().range([hGDim.h, 0])
                                .domain([0, d3.max(fD, function(d) {
                                    return d[1];
                                })]);

                            // Create bars for histogram to contain rectangles and freq labels.
                            var bars = hGsvg.selectAll(".bar").data(fD).enter()
                                .append("g").attr("class", "bar");

                            //create the rectangles.
                            bars.append("rect")
                                .attr("x", function(d) {
                                    return x(d[0]);
                                })
                                .attr("y", function(d) {
                                    return y(d[1]);
                                })
                                .attr("width", x.rangeBand())
                                .attr("height", function(d) {
                                    return hGDim.h - y(d[1]);
                                })
                                .attr('fill', barColor)
                                .on("mouseover", mouseover) // mouseover is defined below.
                                .on("mouseout", mouseout); // mouseout is defined below.

                            //Create the frequency labels above the rectangles.
                            bars.append("text").text(function(d) {
                                    return d3.format(",")(d[1])
                                })
                                .attr("x", function(d) {
                                    return x(d[0]) + x.rangeBand() / 2;
                                })
                                .attr("y", function(d) {
                                    return y(d[1]) - 5;
                                })
                                .attr("text-anchor", "middle");

                            function mouseover(d) { // utility function to be called on mouseover.
                                // filter for selected state.
                                var st = fData.filter(function(s) {
                                        return s.State == d[0];
                                    })[0],
                                    nD = d3.keys(st.freq).map(function(s) {
                                        return {
                                            type: s,
                                            freq: st.freq[s]
                                        };
                                    });

                                // call update functions of pie-chart and legend.    
                                pC.update(nD);
                                leg.update(nD);
                            }

                            function mouseout(d) { // utility function to be called on mouseout.
                                // reset the pie-chart and legend.    
                                pC.update(tF);
                                leg.update(tF);
                            }

                            // create function to update the bars. This will be used by pie-chart.
                            hG.update = function(nD, color) {
                                // update the domain of the y-axis map to reflect change in frequencies.
                                y.domain([0, d3.max(nD, function(d) {
                                    return d[1];
                                })]);

                                // Attach the new data to the bars.
                                var bars = hGsvg.selectAll(".bar").data(nD);

                                // transition the height and color of rectangles.
                                bars.select("rect").transition().duration(500)
                                    .attr("y", function(d) {
                                        return y(d[1]);
                                    })
                                    .attr("height", function(d) {
                                        return hGDim.h - y(d[1]);
                                    })
                                    .attr("fill", color);

                                // transition the frequency labels location and change value.
                                bars.select("text").transition().duration(500)
                                    .text(function(d) {
                                        return d3.format(",")(d[1])
                                    })
                                    .attr("y", function(d) {
                                        return y(d[1]) - 5;
                                    });
                            }
                            return hG;
                        }

                        // function to handle pieChart.
                        function pieChart(pD) {
                            var pC = {},
                                pieDim = {
                                    w: 250,
                                    h: 250
                                };
                            pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

                            // create svg for pie chart.
                            var piesvg = d3.select(id).append("svg")
                                .attr("width", pieDim.w).attr("height", pieDim.h).append("g")
                                .attr("transform", "translate(" + pieDim.w / 2 + "," + pieDim.h / 2 + ")");

                            // create function to draw the arcs of the pie slices.
                            var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

                            // create a function to compute the pie slice angles.
                            var pie = d3.layout.pie().sort(null).value(function(d) {
                                return d.freq;
                            });

                            // Draw the pie slices.
                            piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
                                .each(function(d) {
                                    this._current = d;
                                })
                                .style("fill", function(d) {
                                    return segColor(d.data.type);
                                })
                                .on("mouseover", mouseover).on("mouseout", mouseout);

                            // create function to update pie-chart. This will be used by histogram.
                            pC.update = function(nD) {
                                piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
                                    .attrTween("d", arcTween);
                            }
                            // Utility function to be called on mouseover a pie slice.
                            function mouseover(d) {
                                // call the update function of histogram with new data.
                                hG.update(fData.map(function(v) {
                                    return [v.State, v.freq[d.data.type]];
                                }), segColor(d.data.type));
                            }
                            //Utility function to be called on mouseout a pie slice.
                            function mouseout(d) {
                                // call the update function of histogram with all data.
                                hG.update(fData.map(function(v) {
                                    return [v.State, v.total];
                                }), barColor);
                            }
                            // Animating the pie-slice requiring a custom function which specifies
                            // how the intermediate paths should be drawn.
                            function arcTween(a) {
                                var i = d3.interpolate(this._current, a);
                                this._current = i(0);
                                return function(t) {
                                    return arc(i(t));
                                };
                            }
                            return pC;
                        }

                        // function to handle legend.
                        function legend(lD) {
                            var leg = {};

                            // create table for legend.
                            var legend = d3.select(id).append("table").attr('class', 'legend');

                            // create one row per segment.
                            var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");

                            // create the first column for each segment.
                            tr.append("td").append("svg").attr("width", '16').attr("height", '16').append("rect")
                                .attr("width", '16').attr("height", '16')
                                .attr("fill", function(d) {
                                    return segColor(d.type);
                                });

                            // create the second column for each segment.
                            tr.append("td").text(function(d) {
                                return d.type;
                            });

                            // create the third column for each segment.
                            tr.append("td").attr("class", 'legendFreq')
                                .text(function(d) {
                                    return d3.format(",")(d.freq);
                                });

                            // create the fourth column for each segment.
                            tr.append("td").attr("class", 'legendPerc')
                                .text(function(d) {
                                    return getLegend(d, lD);
                                });

                            // Utility function to be used to update the legend.
                            leg.update = function(nD) {
                                // update the data attached to the row elements.
                                var l = legend.select("tbody").selectAll("tr").data(nD);

                                // update the frequencies.
                                l.select(".legendFreq").text(function(d) {
                                    return d3.format(",")(d.freq);
                                });

                                // update the percentage column.
                                l.select(".legendPerc").text(function(d) {
                                    return getLegend(d, nD);
                                });
                            }

                            function getLegend(d, aD) { // Utility function to compute percentage.
                                return d3.format("%")(d.freq / d3.sum(aD.map(function(v) {
                                    return v.freq;
                                })));
                            }

                            return leg;
                        }

                        // calculate total frequency by segment for all state.
                        var tF = ['pommes', 'poires', 'châtaignes'].map(function(d) {
                            return {
                                type: d,
                                freq: d3.sum(fData.map(function(t) {
                                    return t.freq[d];
                                }))
                            };
                        });

                        // calculate total frequency by state for all segment.
                        var sF = fData.map(function(d) {
                            return [d.State, d.total];
                        });

                        var hG = histoGram(sF), // create the histogram.
                            pC = pieChart(tF), // create the pie-chart.
                            leg = legend(tF); // create the legend.
                    }

                </script>


			<script>
                    var freqData = [{
                        State: 'JAN',
                        freq: {
                            pommes: 600,
                            poires: 340,
                            châtaignes: 450
                        }
                    }, {
                        State: 'FEV',
                        freq: {
                            pommes: 700,
                            poires: 410,
                            châtaignes: 100
                        }
                    }, {
                        State: 'MAR',
                        freq: {
                            pommes: 1200,
                            poires: 708,
                            châtaignes: 60
                        }
                    }, {
                        State: 'AVR',
                        freq: {
                            pommes: 1600,
                            poires: 1150,
                            châtaignes: 240
                        }
                    }, {
                        State: 'MAI',
                        freq: {
                            pommes: 1600,
                            poires: 0,
                            châtaignes: 190
                        }
                    }, {
                        State: 'JUN',
                        freq: {
                            pommes: 1600,
                            poires: 700,
                            châtaignes: 100
                        }
                    }, {
                        State: 'JUL',
                        freq: {
                            pommes: 1800,
                            poires: 450,
                            châtaignes: 240
                        }
                    }, {
                        State: 'AOU',
                        freq: {
                            pommes: 440,
                            poires: 300,
                            châtaignes: 120
                        }
                    }, {
                        State: 'SEP',
                        freq: {
                            pommes: 2480,
                            poires: 1800,
                            châtaignes: 700
                        }
                    }, {
                        State: 'OCT',
                        freq: {
                            pommes: 2600,
                            poires: 1380,
                            châtaignes: 470
                        }
                    }, {
                        State: 'NOV',
                        freq: {
                            pommes: 2300,
                            poires: 1000,
                            châtaignes: 580
                        }
                    }, {
                        State: 'DEC',
                        freq: {
                            pommes: 1900,
                            poires: 780,
                            châtaignes: 880
                        }
                    }];

                    dashboard('#dashboard', freqData);

                </script>


		</div>
		</section>
		<script>
        speed = 600

    </script>
		<script
			src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>

		<script src="AvisConso/js/AvisConso.js"></script>
		<script src="VentesDuMois/js/VentesDuMois.js"></script>

		<script type="text/javascript" async=""
			src="https://www.tameteo.com/wid_loader/ef64d4e905d5a82b7520aa3e40cb3a1a"></script>



	</ui:define>

</ui:composition>
</html>